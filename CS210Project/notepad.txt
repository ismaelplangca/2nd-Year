Sentence 1: When will we see Arrakis as a paradise?
Sentence 2: Guybon, Talmanes said, turning back.
Count: 22 - true
Sentence 1: Oh, that’s a nice one, that is.
Sentence 2: A heavy thud.
Count: 22 - true
Sentence 1: You are going to be a great tennis player.
Sentence 2: black bastard .
Count: 22 - true
Sentence 1: You are going to be a great tennis player.
Sentence 2: black bastard .
Count: 22
ms: 43053522 - 11 Hours 57 Minutes 33 Seconds

        String[] sen1 = {"My","Your","Her","His","Our","Their"}; // 6
        String[] sen2 = load(new File("Generator/adj.txt") );    // 907
        String[] sen3 = load(new File("Generator/nouns.txt") );  // 89
        String[] sen4 = {"was","will be"};                       // 2
        String[] sen5 = load(new File("Generator/verbs.txt") );  // 373
        String[] sen6 = {".","!","?"};                           // 3
        // Total: 1,083,948,444 - 1,083,948,444

        String[] sen1 = {"My","Your","Her","His","Our","Their"};   // 6
        String[] sen2 = load(new File("Generator/adj_50.txt") );   // 907 -> 50
        String[] sen3 = load(new File("Generator/nouns_50.txt") ); // 89  -> 50
        String[] sen4 = {"was","will be"};                         // 2
        String[] sen5 = load(new File("Generator/verbs_50.txt") ); // 373 -> 50
        String[] sen6 = {".","!","?"};                             // 3
        // Total: 1,083,948,444 -> 4,500,000

Most similar sentence hashes in books 1 to  6 in the “Dune” series by Frank Herbert.
Sentence 1: Be thankful that I never married you, my dear.
Sentence 2: How can I know every feature of you?
Count: 20

Most similar sentence hashes in “East of Eden” by John Steinbeck.
Sentence 1: I wonder what dialect they speak at Stanford.
Sentence 2: You like a nice cup of hot coffee? He asked.
Count: 19

        /*
        int highestCount = -1, count;
        StringBuilder highestStrings = new StringBuilder();
        // Compare element i to every other element in the array
        for(int i = 0; i < senLen; i++) {
            for(int j = i+1; j < senLen; j++) {
                count = compareHash(hashes[i], hashes[j]);
                // Filters equal strings and lower counts
                if(count == 64 || count < highestCount) continue;
                if(count == highestCount) {
                    // If true, append sentences and count
                    // so that more than one pair of sentences will be printed
                    highestStrings
                            .append("\nSentence 1: ").append(sentences[i] )
                            .append("\nSentence 2: ").append(sentences[j] )
                            .append("\nCount: ").append(count);
                } else { // count > highestCount
                    // replace highestCount and highestStrings
                    highestCount = count;
                    highestStrings = new StringBuilder(
                            "Sentence 1: " + sentences[i] +
                            "\nSentence 2: " + sentences[j] +
                            "\nCount: " + highestCount);
                }
            }
        }
        System.out.println(highestStrings);
        //*/ // Comparing hashes

        4965541
        // adjectives -> nouns -> verbs

        public String next() {
                if(i6 + 1 < 3) {
                    i6++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i6 = 0;
                if(i5 + 1 < 373) {
                    i5++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i5 = 0;
                if(i4 + 1 < 2) {
                    i4++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i4 = 0;
                if(i3 + 1 < 89) {
                    i3++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i3 = 0;
                if(i2 + 1 < 907) {
                    i2++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i2 = 0;
                if(i1 + 1 < 6) {
                    i1++;
                    curr = sen1[i1] + " " + sen2[i2] + " " + sen3[i3] + " " + sen4[i4] + " " + sen5[i5] + sen6[i6];
                    return curr;
                }
                i1 = 0; // "Overflows" and resets the counters
                curr = null;
                return getCurrent();
            }